{"version":3,"sources":["components/Navbar.js","components/EmployeeRow.js","utils/API.js","components/SearchBox.js","components/Titles.js","components/Search.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","EmployeeRow","props","src","img","alt","dob","name","phone","href","email","target","axios","get","SearchBox","placeholder","type","onChange","handleInput","Titles","onClick","click","Search","state","users","order","filterdUsers","loading","search","sorted","handleInputChange","event","searchEmployee","filter","first","toLowerCase","includes","last","cell","date","setState","value","handleSort","filtered","sort","a","b","console","log","map","key","picture","medium","moment","format","API","then","res","data","results","catch","err","this","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6f00bfa8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n      <div className=\"card-header bg-dark text-white\">\r\n      Employee Directory\r\n      </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport \"../styles/EmployeeRow.css\";\r\n\r\nfunction EmployeeRow(props) {\r\n    return ( \r\n      <div className=\"container\">\r\n      <div className=\"row\">\r\n          <div className=\"col-2 userImg\">\r\n            <img src={props.img} alt={props.dob}/>\r\n          </div>\r\n          <div className=\"col-2 userName\">\r\n              <p>\r\n                {props.name}\r\n              </p>\r\n          </div>\r\n          <div className=\"col-3 userPhone\">\r\n            <p>\r\n              {props.phone}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-3 userEmail\">\r\n            <p>\r\n              <a href={\"mailto:\" + props.email} target=\"__blank\">\r\n                {props.email}\r\n              </a>\r\n                \r\n            </p>\r\n          </div>\r\n          <div className=\"col-2 userDob\">\r\n            <p>\r\n              {props.dob}\r\n            </p>\r\n          </div>\r\n      </div>\r\n  </div>\r\n\r\n                \r\n    )\r\n}\r\n\r\nexport default EmployeeRow;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=100\";\r\n\r\nexport default {\r\n  getEmployee: function() {\r\n      \r\n    return axios.get(BASEURL);\r\n  }\r\n};","import React from \"react\";\r\nimport \"../styles/SearchBox.css\"\r\n\r\nfunction SearchBox(props) {\r\n    return (\r\n        <div className=\"search\">\r\n            <input \r\n            placeholder=\"Search for Employee\"\r\n            type=\"search\"\r\n            onChange={props.handleInput} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport \"../styles/Titles.css\"\r\n\r\nfunction Titles(props) {\r\n    return (\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-2 image\">\r\n                Image\r\n            </div>\r\n            <div className=\"col-2 name\" onClick={props.click}>\r\n                Name\r\n            </div>\r\n            <div className=\"col-3 phone\">\r\n                Phone\r\n            </div>\r\n            <div className=\"col-3 email\" onClick={props.click}>\r\n                Email\r\n            </div>\r\n            <div className=\"col-2 dob\">\r\n                Date of Birth\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n} \r\n\r\nexport default Titles;","import React, { Component } from \"react\";\r\nimport EmployeeRow from \"./EmployeeRow\";\r\nimport moment from \"moment\";\r\nimport API from \"../utils/API\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Titles from \"./Titles\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        users: [{}],\r\n        order: \"descend\",\r\n        filterdUsers: [{}],\r\n        loading: true,\r\n        search: \"\",\r\n        sorted: false\r\n    };\r\n\r\n\r\n    handleInputChange = event => {\r\n        let { users, search } = this.state;\r\n        let searchEmployee = users.filter(sorted => {\r\n            return (\r\n               sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\n               sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\r\n               sorted.email.toLowerCase().includes(search.toLowerCase()) ||\r\n               sorted.cell.toLowerCase().includes(search.toLowerCase()) ||\r\n               sorted.dob.date.toLowerCase().includes(search.toLowerCase()) \r\n\r\n            )\r\n        })\r\n            // console.log(event.target.value)\r\n            this.setState({ sorted: true })\r\n            this.setState({ search: event.target.value });\r\n            this.setState({ filterdUsers: searchEmployee });\r\n            // console.log(this.state.filterdUsers)\r\n    };\r\n\r\n\r\n    handleSort = () => {\r\n        if (this.state.order === \"descend\") {\r\n            this.setState({ order: \"asc\"})\r\n        } else {\r\n            this.setState({ order: \"descend\"})\r\n        }\r\n\r\n        \r\n        let { users, order } = this.state;\r\n\r\n        function compare( a, b ) {\r\n            if (order === \"asc\") {\r\n                if ( a.name.first < b.name.first )\r\n                {    return -1;  \r\n              }  \r\n              if ( a.name.last > b.name.last )\r\n              {    \r\n                  return 1;  \r\n              }  \r\n              return 0;\r\n            } else {\r\n                if ( a.name.first > b.name.first )\r\n                {    return -1;  \r\n              }  \r\n              if ( a.name.last < b.name.last )\r\n              {    \r\n                  return 1;  \r\n              }  \r\n              return 0;\r\n\r\n            }\r\n        \r\n        }\r\n        const filtered = users.sort( compare );\r\n                        \r\n        console.log(filtered)\r\n    }\r\n\r\n    searchEmployee = () => {\r\n        if (this.state.sorted) {\r\n            return <div>\r\n                {this.state.filterdUsers.map(users=> (\r\n                    <EmployeeRow\r\n                        key={users.dob.date}\r\n                        img={users.picture.medium}\r\n                        name={users.name.first + \" \" + users.name.last} \r\n                        phone={users.cell}\r\n                        email={users.email}\r\n                        dob={moment(users.dob.date).format(\"MM-DD-YYYY\")}\r\n                    />\r\n                ))}\r\n            </div>\r\n        }\r\n\r\n        else if(this.state.loading === false) {\r\n            return <div>\r\n                {this.state.users.map(users=> (\r\n                    <EmployeeRow\r\n                        key={users.dob.date}\r\n                        img={users.picture.medium}\r\n                        name={users.name.first + \" \" + users.name.last} \r\n                        phone={users.cell}\r\n                        email={users.email}\r\n                        dob={moment(users.dob.date).format(\"MM-DD-YYYY\")}\r\n                    /> \r\n            ))}\r\n        </div>\r\n\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getEmployee()\r\n        .then(res =>  {\r\n            // console.log(res.data)\r\n            this.setState({ users: res.data.results, loading: false })\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n                \r\n                <div>\r\n                    <SearchBox handleInput={this.handleInputChange}/>\r\n                    <Titles click={this.handleSort}/>\r\n                    {this.searchEmployee()}\r\n                </div>    \r\n                 \r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport \"../styles/Footer.css\"\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer className=\"bg-dark footer text-white\">\r\n        <div className=\"card-header bg-dark text-white\">\r\n        &copy; EMPIERRE 2020\r\n        </div>\r\n\r\n      </footer>\r\n    );\r\n  }\r\n  \r\n  export default Footer;","import React from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\n\n\nfunction App() {\n  return(\n      <div className=\"flexbox-container\">\n        <Navbar />\n        <Search/>\n        <Footer/>\n      </div>\n    \n\n  \n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}